//var a = 'number' + 3 + 3;
console.log(a)//
//відповідь буде "number33" за рахунок канкатинації, з'єднання рядків

//var a = null + 3;
console.log(a)//
//відповідь буде  число 3, тому що null перетворюється на число 0 за рахунок неявного перетворення.

//5 && "qwerty"
//поверне "qwerty"
//1. Першим кроком перевіриться чи є значення першого операнду 5 істиною - воно є true;
//2. Далі оператор && перевіряє другий операнд "qwerty" - він також true;
//3. Оператор && повертає значення другого операнда, якщо обидва true. Якщо обидва будуть false, то тоді
      оператор повертає значення першого операнда

//+'40' + +'2' + "hillel"
//поверне '42hillel' за рахунок використання унарного оператора '+'
//1. спершу '+' перетворить '40' у число 40
//2. далі '+' перетворить '2' у число 2
//3. виконається арифметичне додавання 40+2
//4. отримане число 42 за рахунок конкатинації поєднається з стрінгою "hillel"

//'10' - 5 === 6
//поверне false
//1. оператор явного перетворення '-' перетворить стрінгу '10' в число
//2. потім відбудеться математична дія 10-5, отримаємо число 5
//3. потім оператор строгого порівняння порівняє 5 і 6 і поверне false

//true + false
//поверне число 1
//1. true конвертується в число 1
//2. false конвертується в число 0
//3. арифметичне додавання поверне 1

//'4px' - 3
//поверне NaN
//оператор '-' не зможе перетворити стрінгу '4px' в число тому повертає NaN

//'4' - 3
//поверне 1, тому що оператор '-' перетворить стрінгу '4' на число і виконає математичну дію

//'6' + 3 ** 0
//поверне стрінгу '61'
//1. спершу виконається дія 3 ** 0, возведення 3 в нульвий ступінь, це буде 1
//2. потім методом конкатинації операнди поєднаються і отримаємо стрінгу '61'

//12 / '6'
//поверне число 2
//1. оператор ділення перетворить стрінгу '6' в число
//2. виконається математична дія ділення.

//'10' + (5 === 6);
//поверне '10false'
//1. вираз строгого порівняння (5 === 6) поверне false, бо 5 не рівно 6
//2. далі конкатинація поєднає операнди '10' і false

//null == ''
//поверне false тому що оператор '==' це оператор не строгого порівняння, який порівнює типи даних.
//В даному випадку маємо різні типи даних.

//3 ** (9 / 3);
//поверне 27
//1. це правоасоціативна операція. Спочатку виконається дідення, отримаємо 3.
//2. потім возведення 3 в третю ступінь

//!!'false' == !!'true'
//поверне true, тому що оператор '==' це оператор не строгого порівняння, який порівнює типи даних.
//В даному випадку маємо однакові типи даних.

//0 || '0' && 1
//поверне 1
//1. спершу обчислиться оператор && (і), рядок приведе до true і 1 буде true, тому поверне останній операнд - 1
//2. отримаємо вираз 0 || 1
//3. оператор || (або) повертає перше істинне значення або останнє значення, якщо обидва ложні.
//В даному випадку обідва операнди true, тому поверне перше істине - 1 (перше з правої сторони)

//(+null == false) < 1
//поверне false
//1. +null оператором явного перетворення '+' перетвориться на 0
//2. в дужках отримаємо вираз 0 == false, оператор '==' перетворить false також на 0. І тоді вираз буде true.
//3. При порівнянні логічного true з числом 1, true автоматично конвертується в 1. Отримуємо 1 < 1 що є false.

//false && true || true
//отримаємо true
//1. оператор && виконується до перщого неістиного значення і поаертає його, тобто він поверне false
//2. отримаємо false || true
//3. опертор 'або' поверне істину, якщо хоч один операнд істинний.

//false && (false || true);
//поверне false
//1. першою виконається дія в дужках. опертор 'або' поверне істину, якщо хоч один операнд істинний.
//2. отримаємо false && true
//3. оператор && виконується до перщого неістиного значення і поаертає його, тобто він поверне false

(+null == false) < 1 ** 5
поверне false
1. +null перетворюється в 0, оскільки null при конвертації в число стає 0.
2. отримаємо 0 == false
3. оператор '==' порівняє операнди без прив'яки до типів даних, в даному випадку нуль дорівнює неістині.
тобто в дужках отримаємо true.
4. 1 ** 5 це оперрація возведення одиниці в п'яту ступінь, що дорівнює одиниці.
5. отримаємо вираз 1 < 1, шо не є істиною.