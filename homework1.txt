//var a = 'number' + 3 + 3;
console.log(a)// відповідь буде "number33" за рахунок канкатинації, з'єднання рядків

//var a = null + 3;
console.log(a)// відповідь буде  число 3, тому що null перетворюється на число 0 за рахунок неявного перетворення.

// 5 && "qwerty" поверне "qwerty"
// 1. Першим кроком перевіриться чи є значення першого операнду 5 істиною - воно є true;
// 2. Далі оператор && перевіряє другий операнд "qwerty" - він також true;
// 3. Оператор && повертає значення другого операнда, якщо обидва true. Якщо обидва будуть false, то тоді
      оператор повертає значення першого операнда

// +'40' + +'2' + "hillel" поверне '42hillel' за рахунок використання унарного оператора '+'
// 1. спершу '+' перетворить '40' у число 40
// 2. далі '+' перетворить '2' у число 2
// 3. виконається арифметичне додавання 40+2
// 4. отримане число 42 за рахунок конкатинації поєднається з стрінгою "hillel"

// '10' - 5 === 6 поверне false
// 1. оператор явного перетворення '-' перетворить стрінгу '10' в число
// 2. потім відбудеться математична дія 10-5, отримаємо число 5
// 3. потім оператор строгого порівняння порівняє 5 і 6 і поверне false

// true + false поверне число 1
// 1. true конвертується в число 1
// 2. false конвертується в число 0
// 3. арифметичне додавання поверне 1

// '4px' - 3  поверне NaN
// оператор '-' не зможе перетворити стрінгу '4px' в число тому повертає NaN

// '4' - 3 поверне 1, тому що оператор '-' перетворить стрінгу '4' на число і виконає математичну дію

// '6' + 3 ** 0 поверне стрінгу '61'
// 1. спершу виконається дія 3 ** 0, возведення 3 в нульвий ступінь, це буде 1
// 2. потім методом конкатинації операнди поєднаються і отримаємо стрінгу '61'

// 12 / '6' поверне число 2
// 1. оператор ділення перетворить стрінгу '6' в число
// 2. виконається математична дія ділення.

// '10' + (5 === 6); поверне '10false'
// 1. вираз строгого порівняння (5 === 6) поверне false, бо 5 не рівно 6
// 2. далі конкатинація поєднає операнди '10' і false

// null == '' поверне false тому що оператор '==' це оператор не строгого порівняння, який порівнює типи даних.
// В даному випадку маємо різні типи даних.

// 3 ** (9 / 3); поверне 27
// 1. це правоасоціативна операція. Спочатку виконається дідення, отримаємо 3.
// 2. потім возведення 3 в третю ступінь

